{"version":3,"file":"pages/index/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AANA;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAsBA;AASA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA","sources":["webpack://taro-mobile-react/._src_pages_index_index.tsx","webpack://taro-mobile-react/./src/pages/index/index.tsx?743a","webpack://taro-mobile-react/._src_pages_index_orderItem.tsx"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { queryContractPageC } from 'qj-b2c-api';\nimport {getEnv, useImmutableCallback} from '@brushes/utils';\nimport { ScrollView, View } from '@tarojs/components';\nimport { Item } from './orderItem';\nimport { isEmpty } from 'lodash-es'\nconst isTaro = getEnv();\n\nfunction Index() {\n  const isScroll = useRef(false);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<any[]>([]);\n  const num = useRef(0);\n  useEffect(() => {\n    init();\n  }, []);\n\n  const init = useImmutableCallback(() => {\n    num.current = 0;\n    setData([]);\n    onScroll();\n  });\n\n  const onScroll = useImmutableCallback(async (e = {}) => {\n    if (isScroll.current) return;\n    setLoading(true);\n    ++num.current;\n    try {\n      const data = await queryContractPageC({\n        page: num.current,\n        rows: 10,\n        isLocalMock: !isTaro,\n        childFlag: true,\n        dataStateStr: -1\n      });\n      isScroll.current = isEmpty(data.rows) || data.rows.length < 10;\n      setData((val) => val.concat(data.rows || []));\n      setLoading(false);\n    } catch (err) {\n      --num.current;\n      console.log(30, err);\n    }\n  });\n  const onScrollImpl = (e) =>{\n    console.log(e.detail)\n  }\n\n  return (\n    <View className={'orderListItemWrap'}>\n      <ScrollView\n        className='scrollview'\n        scrollY\n        scrollWithAnimation\n        scrollTop={0}\n        style={{height: '90vh'}}\n        lowerThreshold={50}\n        upperThreshold={50}\n        onScrollToUpper={onScroll} // 使用箭头函数的时候 可以这样写 `onScrollToUpper={this.onScrollToUpper}`\n        onScroll={onScrollImpl}\n        >\n        <View>\n          {data.map((item, index) => (\n            <Item init={init} {...item} key={index} />\n          ))}\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\nexport default Index;\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./index.tsx\"\nvar config = {\"navigationBarTitleText\":\"首页\"};\n\n\nvar inst = Page(createPageConfig(component, 'pages/index/index', {root:{cn:[]}}, config || {}))\n\n\n","import { useComponent, antdMobile } from '@brushes/simulate-component';\nimport { navigatorImpl } from '@brushes/utils';\nimport { orderStatusImpl, routerMap } from 'qj-mobile-store';\nimport { CardJsx } from '@/common/card';\nimport FooterComponent from '@/components/OrderDetail/component/footer';\n\nconst { Button } = antdMobile;\n\ninterface OrderType {\n    contractBillcode: string;\n    goodsList: Array<OrderGoodsItem>;\n    dataBmoney: number;\n    dataBnum: number;\n    dataState: number | string;\n    contractId: string | number;\n    init: () => void;\n    contractAppraise: number;\n}\n\nexport interface OrderGoodsItem {\n    dataPic: string;\n    goodsName: number;\n    dataBmoney: number;\n    goodsCamount: number;\n    contractGoodsId: number;\n    dataState: number | string;\n}\n\nexport function Item({\n    contractBillcode,\n    dataBmoney,\n    dataBnum,\n    goodsList,\n    dataState,\n    contractId,\n    init,\n    contractAppraise\n}: OrderType) {\n    const { View } = useComponent();\n    const status = orderStatusImpl(dataState);\n    return (\n        <View className={'orderListItem'}>\n            <View onClick={() => navigatorImpl(`${routerMap.orderDetail}?contractBillcode=${contractBillcode}`)}>\n                <View className={'topInfo'}>\n                    <View className={'orderNo'}>\n                        订单号: {contractBillcode}\n                        <Button className={'copy'} size=\"mini\" fill={'outline'}>\n                            复制\n                        </Button>\n                    </View>\n                    <View className={'status'}>{status}</View>\n                </View>\n                <View className={'goodsItemWrap'}>\n                    {goodsList.map((item) => (\n                        <CardJsx key={item.contractGoodsId} {...item} />\n                    ))}\n                    <View className={'allInfo'}>\n                        <View className={'totalNum'}>共{dataBnum}件商品</View>\n                        <View className={'totalPrice'}>合计 ￥{dataBmoney}</View>\n                    </View>\n                </View>\n            </View>\n            <FooterComponent\n                init={init}\n                contractId={contractId}\n                contractBillcode={contractBillcode}\n                dataState={dataState}\n                contractAppraise={contractAppraise}\n            />\n        </View>\n    );\n}\n"],"names":[],"sourceRoot":""}